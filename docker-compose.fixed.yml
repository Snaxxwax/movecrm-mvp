version: '3.8'

# Simplified working configuration for MoveCRM
# This version focuses on core functionality and stability

services:
  # PostgreSQL Database - Essential
  postgres:
    image: postgres:15-alpine
    container_name: movecrm-postgres
    environment:
      POSTGRES_DB: movecrm
      POSTGRES_USER: movecrm
      POSTGRES_PASSWORD: movecrm_password
      POSTGRES_HOST_AUTH_METHOD: trust  # Simplified auth for development
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Use simplified schema instead of complex one
      # - ./docs/database_schema_simple.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro,Z  # Disabled due to SELinux
    networks:
      - movecrm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movecrm -d movecrm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching - Essential
  redis:
    image: redis:7-alpine
    container_name: movecrm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movecrm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API - Simplified startup
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: movecrm-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - DATABASE_URL=postgresql://movecrm:movecrm_password@postgres:5432/movecrm
      - REDIS_URL=redis://redis:6379/0
      - SUPERTOKENS_CONNECTION_URI=http://supertokens:3567
      - SUPERTOKENS_API_KEY=supertokens-api-key
      - YOLOE_SERVICE_URL=http://yoloe-mock:8001
      - SECRET_KEY=dev-secret-key-change-in-production
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - movecrm-network
    # Override complex gunicorn startup with simple Flask dev server
    command: ["python", "src/main.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Mock YOLOE Service - Simplified version
  yoloe-mock:
    image: python:3.11-slim
    container_name: movecrm-yoloe-mock
    working_dir: /app
    ports:
      - "8001:8001"
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8001
      - PYTHONUNBUFFERED=1
    volumes:
      - ./yoloe-service:/app
    networks:
      - movecrm-network
    command: >
      sh -c "
        pip install --no-cache-dir fastapi uvicorn python-multipart &&
        if [ -f main_mock.py ]; then
          python main_mock.py
        else
          python main.py
        fi
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Widget CDN Server - Simple nginx
  widget-cdn:
    image: nginx:alpine
    container_name: movecrm-widget-cdn
    ports:
      - "8080:80"
    volumes:
      - ./widget/dist:/usr/share/nginx/html:ro
      # Only mount nginx.conf if it exists
      - ./widget/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - movecrm-network
    # Add default content if dist doesn't exist
    command: >
      sh -c "
        if [ ! -f /usr/share/nginx/html/index.html ]; then
          echo '<h1>Widget CDN Ready</h1>' > /usr/share/nginx/html/index.html;
        fi;
        nginx -g 'daemon off;'
      "

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: movecrm-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - movecrm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: movecrm-adminer
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DB: movecrm
      ADMINER_DEFAULT_USERNAME: movecrm
    networks:
      - movecrm-network
    depends_on:
      - postgres

  # Optional: SuperTokens (comment out if causing issues)
  # supertokens:
  #   image: registry.supertokens.io/supertokens/supertokens-postgresql:7.0
  #   container_name: movecrm-supertokens
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   ports:
  #     - "3567:3567"
  #   environment:
  #     POSTGRESQL_CONNECTION_URI: "postgresql://movecrm:movecrm_password@postgres:5432/movecrm"
  #     API_KEYS: "supertokens-api-key"
  #   networks:
  #     - movecrm-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  minio_data:
    driver: local

networks:
  movecrm-network:
    driver: bridge
